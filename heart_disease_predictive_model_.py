# -*- coding: utf-8 -*-
"""HEART DISEASE PREDICTIVE MODEL .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SDAtt94HMB1w_vV8_0uIcisDz4pFILNf
"""

from google.colab import drive
drive.mount('/content/Heart_Disease_prediction')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import tensorflow as st
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Dropout
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

df=pd.read_csv('/content/Heart_Disease_prediction/MyDrive/Heart_disease_pred/heart.csv')
df.head()

df.tail()

df.info()

df.describe()

X=df.drop('target',axis=1)
y=df['target']

(X)

(y)

x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

Scalar=StandardScaler()
x_train=Scalar.fit_transform(x_train)
x_test=Scalar.transform(x_test)

#create model
model=Sequential([
    Dense(32,activation='relu',input_shape=(x_train.shape[1],)),
    Dropout(0.5),
    Dense(64,activation='relu'),
    Dropout(0.1),
    Dense(1,activation='sigmoid')
])

#compiling model
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])
model.summary()

#training model
model.fit(x_train,y_train,epochs=100,batch_size=32,validation_data=(x_test,y_test))

#Model Evaluation
loss, accuracy = model.evaluate(xtest, ytest)
print(f'Test loss: {loss:.4f}')
print(f'Test accuracy: {accuracy:.4f}')

# prompt: saving the model above

model.save('heart_disease_model.h5')

#loading Saved Model
from tensorflow.keras.models import load_model
loaded_model = load_model('heart_disease_model.h5')

#Predicting with new data
#age	sex	cp	trestbps	chol	fbs	restecg	thalach	exang	oldpeak	slope	ca	thal
new_data = [[59,	1,	1,	140,	221,	0,	1,	164,	1,	0.0,	2,	0,	2	]]

# Preprocess the new data (scale it)
new_data_scaled = scaler.transform(new_data)
# Predict using the loaded model
prediction = loaded_model.predict(new_data_scaled)

# Convert the output from probability to class (0 or 1)
predicted_class = (prediction > 0.5).astype(int)
print(f'Prediction: {predicted_class[0][0]}')